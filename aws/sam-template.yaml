AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: "Send Cloudwatch metrics from your CloudWatch to Logz.io"
Parameters:
  logzioDestination:
    Type: String
    Description: 'Your Logz.io destination'
    Default: 'https://listener-aws-metrics-stream-us.logz.io/'
    AllowedValues:
      - 'https://listener-aws-metrics-stream-us.logz.io/'
      - 'https://listener-aws-metrics-stream-eu.logz.io/'
      - 'https://listener-aws-metrics-stream-au.logz.io/'
      - 'https://listener-aws-metrics-stream-uk.logz.io/'
      - 'https://listener-aws-metrics-stream-ca.logz.io/'
  logzioToken:
    Type: String
    Description: 'Your Logz.io log shipping token'
    MinLength: 1
  logzioListener:
    Type: String
    Description: 'Your Logz.io listener'
    Default: 'https://listener.logz.io:8053'
    AllowedValues:
      - 'https://listener.logz.io:8053'
      - 'https://listener-au.logz.io:8053'
      - 'https://listener-ca.logz.io:8053'
      - 'https://listener-eu.logz.io:8053'
      - 'https://listener-uk.logz.io:8053'
  awsNamespaces:
    Type: String
    Description: 'The AWS namespaces you want to collect metrics from'
  customNamespace:
    Type: String
    Description: 'A custom namespace for CloudWatch metrics'
  httpEndpointDestinationIntervalInSeconds:
    Type: Number
    Description: 'The length of time, in seconds, that Kinesis Data Firehose buffers incoming data before delivering it to the destination'
    Default: 60
  httpEndpointDestinationSizeInMBs:
    Type: Number
    Description: 'The size of the buffer, in MBs, that Kinesis Data Firehose uses for incoming data before delivering it to the destination'
    Default: 5
Conditions:
  AtLeastOneNamespaceDefined: !Or
    - !Not [!Equals [!Ref awsNamespaces, ""]]
    - !Not [!Equals [!Ref customNamespace, ""]]
  BothNamespacesEmpty: !And
    - !Equals [ !Ref awsNamespaces, "" ]
    - !Equals [ !Ref customNamespace, "" ]
Resources:
  logzioS3BackupBucket:
    Type: AWS::S3::Bucket
    Condition: AtLeastOneNamespaceDefined
    Properties:
      BucketName: !Join ['-', ['logzio-metric-stream-backup', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
  logzioFirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: AtLeastOneNamespaceDefined
    Properties:
      LogGroupName: !Join ['-', ['logzio-metric-stream-firehose', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
  logzioLogStream:
    DependsOn: logzioFirehoseLogGroup
    Type: AWS::Logs::LogStream
    Condition: AtLeastOneNamespaceDefined
    Properties:
      LogGroupName: !Ref logzioFirehoseLogGroup
      LogStreamName: !Join ['-', ['logzio-metric-stream-firehose', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
  logzioS3DestinationFirehoseRole:
    Type: 'AWS::IAM::Role'
    Condition: AtLeastOneNamespaceDefined
    Properties:
      RoleName: !Join ['-', ['LogzioS3DestFirehoseRole', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join ['-', ['LogzioS3DestFirehosePolicy', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}'
                    - BucketName: !Ref logzioS3BackupBucket
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}/*'
                    - BucketName: !Ref logzioS3BackupBucket
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub
                    - 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${NewLogGroupName}:${NewLogStreamName}:*'
                    - NewLogGroupName: !Ref logzioFirehoseLogGroup
                      NewLogStreamName: !Ref logzioLogStream
  logzioFirehoseLoggingRole:
    Type: 'AWS::IAM::Role'
    Condition: AtLeastOneNamespaceDefined
    Properties:
      RoleName: !Join [ '-', [ 'LogzioFirehoseLoggingRole', !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ] ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join [ '-', [ 'LogzioFirehoseLoggingPolicy', !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ] ] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub
                    - 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${NewLogGroupName}:${NewLogStreamName}:*'
                    - NewLogGroupName: !Ref logzioFirehoseLogGroup
                      NewLogStreamName: !Ref logzioLogStream
  logzioDeliveryStream:
    DependsOn: logzioS3BackupBucket
    Type: AWS::KinesisFirehose::DeliveryStream
    Condition: AtLeastOneNamespaceDefined
    Properties:
      DeliveryStreamName: !Join ['-', ['LogzioDeliveryStream', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      DeliveryStreamType: DirectPut
      HttpEndpointDestinationConfiguration:
        RoleARN: !GetAtt logzioFirehoseLoggingRole.Arn
        BufferingHints:
          IntervalInSeconds: !Ref httpEndpointDestinationIntervalInSeconds
          SizeInMBs: !Ref httpEndpointDestinationSizeInMBs
        EndpointConfiguration:
          AccessKey: !Ref logzioToken
          Name: !Join ['-', ['LogzioEndpoint', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          Url: !Ref logzioDestination
        RetryOptions:
          DurationInSeconds: 60
        S3BackupMode: FailedDataOnly
        S3Configuration:
          BucketARN: !GetAtt logzioS3BackupBucket.Arn
          RoleARN: !GetAtt logzioS3DestinationFirehoseRole.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref logzioFirehoseLogGroup
          LogStreamName: !Ref logzioLogStream

  logzioMetricStreamRole:
    Type: 'AWS::IAM::Role'
    Condition: AtLeastOneNamespaceDefined
    Properties:
      RoleName: !Join ['-', ['LogzioMetricStreamRole', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - streams.metrics.cloudwatch.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join ['-', ['LogzioMetricStreamPolicy', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Resource:
                  - !Sub
                    - 'arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${DeliveryStreamName}'
                    - DeliveryStreamName: !Ref logzioDeliveryStream
  logzioMetricStream:
    Type: AWS::CloudWatch::MetricStream
    Condition: AtLeastOneNamespaceDefined
    DependsOn:
      - logzioDeliveryStream
      - logzioMetricStreamRole
    Properties:
      FirehoseArn: !GetAtt logzioDeliveryStream.Arn
      Name: !Join ['-', ['LogzioMetricStream', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      OutputFormat: 'opentelemetry0.7'
      RoleArn: !GetAtt logzioMetricStreamRole.Arn
  logzioMetricStreamAddNamespacesLambda:
    Type: 'AWS::Lambda::Function'
    Condition: AtLeastOneNamespaceDefined
    DependsOn: logzioMetricStream
    Properties:
      Code:
        S3Bucket: logzio-aws-integrations-<<REGION>>
        S3Key: metric-stream-helpers/namespaces/<<VERSION>>/function.zip
      FunctionName:  !Join ['-', [!Ref AWS::StackName, 'namespaces-func']]
      Handler: bootstrap
      Runtime: provided.al2
      Role: !GetAtt logzioNamespacesLambdaRole.Arn
      Timeout: 60
      MemorySize: 512
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          LOGZIO_METRICS_LISTENER: !Ref logzioListener
          LOGZIO_METRICS_TOKEN: !Ref logzioToken
          AWS_NAMESPACES: !Ref awsNamespaces
          CUSTOM_NAMESPACE: !Ref customNamespace
          METRIC_STREAM_NAME: !Ref logzioMetricStream
          FIREHOSE_ARN: !GetAtt logzioDeliveryStream.Arn
          METRIC_STREAM_ROLE_ARN: !GetAtt logzioMetricStreamRole.Arn
          STACK_NAME: !Ref AWS::StackName
  logzioNamespacesPrimerInvoke:
    Type: AWS::CloudFormation::CustomResource
    Condition: AtLeastOneNamespaceDefined
    DependsOn: logzioMetricStreamAddNamespacesLambda
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt logzioMetricStreamAddNamespacesLambda.Arn
  logzioNamespacesLambdaRole:
    Type: 'AWS::IAM::Role'
    Condition: AtLeastOneNamespaceDefined
    Properties:
      RoleName: !Join ['-', ['LogzioMetricStreamNamespacesLambdaRole', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join ['-', ['LogzioMetricStreamNamespacesLambdaPolicy', !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:DescribeStackEvents'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudwatch:PutMetricData'
                  - 'cloudwatch:PutMetricStream'
                  - 'lambda:CreateFunction'
                  - 'lambda:InvokeFunction'
                  - 'lambda:UpdateFunctionCode'
                  - 'lambda:UpdateFunctionConfiguration'
                  - 'lambda:ListFunctions'
                  - 'lambda:GetFunction'
                  - 'lambda:DeleteFunction'
                  - 'lambda:AddPermission'
                  - 'lambda:RemovePermission'
                  - 'iam:PassRole'
                  - 'iam:CreateRole'
                  - 'iam:CreatePolicy'
                  - 'iam:GetRole'
                  - 'iam:AttachRolePolicy'
                  - 'iam:GetPolicy'
                  - 'iam:DeleteRole'
                  - 'iam:DeletePolicy'
                  - 'iam:DetachRolePolicy'
                  - 'iam:GetRolePolicy'
                  - 'iam:PutRolePolicy'
                  - 's3:GetObject'
                  - 's3:LisBucket'
                  - 's3:ListAllMyBuckets'
                  - 'events:PutRule'
                  - 'events:GetRule'
                  - 'events:PutTargets'
                  - 'events:DescribeRule'
                  - 'events:RemoveTargets'
                  - 'custom-resource:Create'
                  - 'custom-resource:Update'
                  - 'custom-resource:Describe'
                  - 'custom-resource:List'
                  - 'custom-resource:Read'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !GetAtt logzioMetricStreamRole.Arn

  logzioMetricStreamAddTagsLambda:
    Type: 'AWS::Lambda::Function'
    Condition: AtLeastOneNamespaceDefined
    DependsOn: logzioMetricStream
    Properties:
      Code:
        S3Bucket: logzio-aws-integrations-<<REGION>>
        S3Key: metric-stream-helpers/namespaces/<<VERSION>>/function.zip
      FunctionName: !Join [ '-', [ !Ref AWS::StackName, 'tags-func' ] ]
      Handler: main
      Runtime: go1.x
      Role: !GetAtt logzioTagsLambdaRole.Arn
      Timeout: 60
      MemorySize: 512
      Environment:
        Variables:
          AWS_NAMESPACES: !Ref awsNamespaces
          LOGZIO_METRICS_LISTENER: !Ref logzioListener
          LOGZIO_METRICS_TOKEN: !Ref logzioToken
  logzioTagsLambdaRole:
    Type: 'AWS::IAM::Role'
    Condition: AtLeastOneNamespaceDefined
    Properties:
      RoleName: !Join [ '-', [ 'LogzioMetricStreamTagsLambdaRole', !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ] ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join [ '-', [ 'LogzioMetricStreamTagsLambdaPolicy', !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ] ] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'tag:GetResources'
                Resource: '*'
  logzioMetricStreamTagsLambdaTrigger:
    DependsOn: logzioMetricStreamAddTagsLambda
    Type: AWS::Events::Rule
    Condition: AtLeastOneNamespaceDefined
    Properties:
      Description: 'This event is a cron job that triggeres every 5 minutes the Logz.io metric stream tags Lambda function.'
      ScheduleExpression: rate(5 minutes)
      Name: !Join [ '-', [ 'LogzioMetricStreamTagsLambdaTrigger', !Select [ 4, !Split [ '-', !Select [ 2, !Split [ '/', !Ref AWS::StackId ] ] ] ] ] ]
      State: ENABLED
      Targets:
        - Arn: !GetAtt logzioMetricStreamAddTagsLambda.Arn
          Id: 'LogzioMetricStreamAddTagsLambda'
  logzioMetricStreamTagsLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: AtLeastOneNamespaceDefined
    Properties:
      FunctionName: !Ref logzioMetricStreamAddTagsLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt logzioMetricStreamTagsLambdaTrigger.Arn
Outputs:
  NamespaceStatus:
    Description: "Status of Namespace Parameters"
    Value:
      Fn::If:
        - BothNamespacesEmpty
        - "Both awsNamespaces and customNamespace are empty. No resources created. Please delete current stack."
        - "At least one namespace is defined. Resources may have been created."
